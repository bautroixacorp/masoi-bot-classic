const { roomChatAll } = require('../Chat/Utils');
const DBTask = require('../DBModule/DBTask');

module.exports = (gamef, bot) => {
    const infoCallback = (payload, chat) => {
        let joinID = payload.sender.id;
        let userRoom = gamef.getUserRoom(joinID);
        if (userRoom != undefined) {
            if (gamef.getRoom(userRoom).ingame) {
                let playersInRoomTxt = gamef.getRoom(userRoom).playersTxt.join('\n');
                let roleListTxt = gamef.getRoom(userRoom).roleListTxt;
                chat.say(`üë®‚Äçüë©‚Äçüë¶‚Äçüë¶Danh s√°ch ng∆∞·ªùi ch∆°i ph√≤ng ${userRoom + 1}:\n${playersInRoomTxt}\n\nSET-UP: ${roleListTxt}`);
            } else {
                let roomView = gamef.getSimpleRoomPlayerView(userRoom);
                chat.say(roomView.join(`\n`));
            }
        } else {
            chat.say('```\nB·∫°n ch∆∞a tham gia ph√≤ng ch∆°i n√†o!\n```');
        }
    };

    const renameCallback = (payload, chat) => {
        let joinID = payload.sender.id;
        let userRoom = gamef.getUserRoom(joinID);
        if (userRoom == undefined) {
            chat.say('```\nB·∫°n c·∫ßn tham gia 1 ph√≤ng ch∆°i tr∆∞·ªõc khi ƒë·ªïi t√™n!\n```');
            return;
        }
        if (gamef.getRoom(userRoom).ingame) {
            chat.say('```\nB·∫°n kh√¥ng th·ªÉ ƒë·ªïi t√™n trong khi ƒëang ch∆°i!\n```');
            return;
        }
        let user = gamef.getRoom(userRoom).getPlayer(joinID);

        const askName = (convo) => {
            convo.ask(`T√™n hi·ªán t·∫°i c·ªßa b·∫°n: ${user.first_name}\nƒê·ªÉ h·ªßy ƒë·ªïi t√™n: /cancel\nNh·∫≠p t√™n b·∫°n mu·ªën ƒë·ªïi th√†nh:`, (payload, convo) => {
                if (!payload.message) {
                    convo.say('```\nVui l√≤ng nh·∫≠p t√™n h·ª£p l·ªá\n```');
                    convo.end();
                    return;
                } else {
                    const chatTxt = payload.message.text;
                    if (!chatTxt.match(/\/cancel/g)) {
                        if (gamef.getRoom(userRoom).ingame) {
                            convo.say('```\nB·∫°n kh√¥ng th·ªÉ ƒë·ªïi t√™n trong khi ƒëang ch∆°i!\n```');
                            return;
                        }
                        convo.say(`B·∫°n ƒë√£ ƒë·ªïi t√™n th√†nh ${chatTxt}!`);
                        roomChatAll(bot, gamef.getRoom(userRoom).players, joinID, `${user.first_name} ƒë√£ ƒë·ªïi t√™n th√†nh ${chatTxt}!`)
                        user.setFirstName(chatTxt);
                        convo.end();
                    } else {
                        convo.say(`B·∫°n ƒë√£ h·ªßy kh√¥ng ƒë·ªïi t√™n!`)
                        convo.end();
                    }
                }
            });
        };
        chat.conversation((convo) => {
            askName(convo);
        });
    };

    const profileCallback = async (payload, chat) => {
        let joinID = payload.sender.id;
        chat.say('üîî ƒêang x·ª≠ l√≠...');
        let userData = await DBTask(`SELECT * FROM USERDATA WHERE joinID = '${joinID}';`);
        let chatTxt = '';
        if (userData) {
            let user = userData[0];
            chatTxt += `Xin ch√†o ${user.fullname} (${user.id}),\nT√™n InGame: ${user.name}\nClan: ${user.clan}\n`;
            chatTxt += `T·ªâ l·ªá S√ìI / D√ÇN / PHE 3 : ${user.bewolf} / ${user.bevillager} / ${user.bethirdparty}\n`;
            chatTxt += `T·ªâ l·ªá th·∫Øng S√ìI / D√ÇN / PHE 3 : ${user.bewolf > 0 ? Math.floor(user.winbewolf / user.bewolf) : '0'}% / ${user.bevillager > 0 ? Math.floor(user.winbevillager / user.bevillager) : '0'}% / ${user.bethirdparty > 0 ? Math.floor(user.winbethirdparty / user.bethirdparty) : '0'}%\n`;
        }
        let userRoom = gamef.getUserRoom(joinID);
        if (userRoom != undefined) {
            let user = gamef.getRoom(userRoom).getPlayer(joinID);
            let uyTin = (60 - user.afkCount * 10);
            chatTxt += `Uy t√≠n c·ªßa b·∫°n: ${uyTin}/60`;
        }
        chat.say(chatTxt);
    };

    // listen VIEW_PLAYER_IN_ROOM message
    bot.on('postback:VIEW_PLAYER_IN_ROOM', infoCallback);
    bot.hear(/^\/info$/, infoCallback);

    // listen USER_RENAME message
    bot.on('postback:USER_RENAME', renameCallback);
    bot.hear(/^\/rename$/, renameCallback);

    // listen USER_RENAME message
    bot.on('postback:USER_PROFILE', profileCallback);
    bot.hear(/^\/profile$/, profileCallback);
};