const { roomChatAll } = require('../Chat/Utils');
const roomRoleChat = require('../Night/roomRoleChat');
const nightDoneCheck = require('../Night/nightDoneCheck');
const dayVoteCheck = require('../Day/dayVoteCheck');
const yesNoVoteCheck = require('../Day/yesNoVoteCheck');

module.exports = (gamef, bot) => {
    const leaveCallback = (payload, chat) => {
        let joinID = payload.sender.id;
        const userRoom = gamef.getUserRoom(joinID);
        if (userRoom != undefined) {
            let user = gamef.getRoom(userRoom).getPlayer(joinID);
            let leaveRole;
            if (!gamef.getRoom(userRoom).ingame) {
                gamef.getRoom(userRoom).deletePlayer(joinID);
                gamef.setUserRoom(joinID, undefined);

                chat.say(`B·∫°n ƒë√£ r·ªùi ph√≤ng ch∆°i ${userRoom + 1}!`);
                // notice new player to everyone in room
                let playerListView = gamef.getRoomPlayerView(userRoom);
                roomChatAll(bot, gamef.getRoom(userRoom).players, 0, [{
                    cards: playerListView
                }, `${user.first_name} ƒë√£ r·ªùi ph√≤ng ch∆°i!`]);

                gamef.gameIsReady(userRoom, async (gameReady) => {
                    if (gameReady && !gamef.getRoom(userRoom).ingame) {
                        console.log(`$ ROOM ${userRoom + 1} > GAME_START`);
                        gamef.getRoom(userRoom).setInGame();
                        let roleListTxt = gamef.roleRandom(userRoom);
                        gamef.getRoom(userRoom).dayNightSwitch();
                        await roomChatAll(bot, gamef.getRoom(userRoom).players, 0, `T·∫•t c·∫£ m·ªçi ng∆∞·ªùi ƒë√£ s·∫µn s√†ng! Game s·∫Ω b·∫Øt ƒë·∫ßu...\n${roleListTxt}\nüåõƒê√™m th·ª© ${gamef.getRoom(userRoom).day}üåõ`);
                        gamef.getRoom(userRoom).newLog(`\nüåõƒê√™m th·ª© ${gamef.getRoom(userRoom).day}üåõ\n`);
                        gamef.func(roomRoleChat, bot, userRoom);
                    }
                });
            } else if (gamef.getRoom(userRoom).alivePlayer[joinID]) {
                user.cancelSchedule();
                gamef.getRoom(userRoom).killAction(user.id);
                leaveRole = user.role;
                chat.say(`\`\`\`\nB·∫°n ƒë√£ t·ª± s√°t!\n\`\`\``);
                roomChatAll(bot, gamef.getRoom(userRoom).players, joinID, `\`\`\`\n${user.first_name} ƒë√£ t·ª± s√°t v·ªõi vai tr√≤ l√†: ${gamef.roleTxt[leaveRole]}\n\`\`\``);
                gamef.getRoom(userRoom).newLog(`\`\`\`\n${user.first_name} ƒë√£ t·ª± s√°t v·ªõi vai tr√≤ l√†: ${gamef.roleTxt[leaveRole]}\n\`\`\``);
                if (gamef.getRoom(userRoom).isNight) {
                    gamef.getRoom(userRoom).roleIsDone((isDone) => {
                        if (isDone) {
                            gamef.func(nightDoneCheck, bot, userRoom);
                        }
                    });
                } else if (gamef.getRoom(userRoom).isMorning) {
                    gamef.getRoom(userRoom).roleIsDone((isDone) => {
                        if (isDone) {
                            gamef.func(dayVoteCheck, bot, userRoom);
                        }
                    });
                } else {
                    gamef.getRoom(userRoom).roleIsDone((isDone) => {
                        if (isDone) {
                            gamef.func(yesNoVoteCheck, bot, userRoom);
                        }
                    });
                }
            } else { // ng∆∞·ªùi ch∆°i ƒë√£ ch·∫øt c√≥ quy·ªÅn r·ªùi ph√≤ng ch∆°i
                // gamef.getRoom(userRoom).justDeletePlayer(user.id);
                // gamef.setUserRoom(joinID, undefined);

                // chat.say(`\`\`\`\nB·∫°n ƒë√£ r·ªùi ph√≤ng ch∆°i ${userRoom + 1}!\n\`\`\``);
                // roomChatAll(bot, gamef.getRoom(userRoom).players, joinID, `\`\`\`\n${user.first_name} ƒë√£ r·ªùi ph√≤ng ch∆°i!\n\`\`\``);
            }
            console.log(`$ ROOM ${userRoom + 1} > LEAVE > ${joinID} : ${user.first_name}`);
        } else {
            chat.say('```\nB·∫°n ch∆∞a tham gia ph√≤ng n√†o!\n```');
        }
    };
    // listen LEAVE ROOM message
    bot.on('postback:LEAVE_ROOM', leaveCallback);
    bot.hear(/\/leave/i, leaveCallback);
};